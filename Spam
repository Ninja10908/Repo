<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Roblox Audio Configurator</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
            color: #333;
        }
        h1 {
            color: #0066cc;
            text-align: center;
            margin-bottom: 30px;
        }
        .container {
            background-color: white;
            padding: 25px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
        }
        input, textarea, select {
            width: 100%;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
            box-sizing: border-box;
        }
        textarea {
            height: 100px;
            resize: vertical;
        }
        button {
            background-color: #0066cc;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            width: 100%;
            margin-top: 10px;
        }
        button:hover {
            background-color: #0055aa;
        }
        .tab {
            display: none;
        }
        .tab.active {
            display: block;
        }
        .tab-buttons {
            display: flex;
            margin-bottom: 20px;
        }
        .tab-button {
            flex: 1;
            padding: 10px;
            text-align: center;
            background-color: #eee;
            border: none;
            cursor: pointer;
        }
        .tab-button.active {
            background-color: #0066cc;
            color: white;
        }
        .status {
            margin-top: 20px;
            padding: 10px;
            border-radius: 4px;
            display: none;
        }
        .success {
            background-color: #d4edda;
            color: #155724;
            display: block;
        }
        .error {
            background-color: #f8d7da;
            color: #721c24;
            display: block;
        }
        .loading {
            text-align: center;
            margin: 20px 0;
            display: none;
        }
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top: 4px solid #0066cc;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <h1>Roblox Audio Configurator</h1>
    
    <div class="container">
        <div class="tab-buttons">
            <button class="tab-button active" onclick="openTab('singleTab')">Single Configuration</button>
            <button class="tab-button" onclick="openTab('bulkTab')">Bulk Configuration</button>
        </div>
        
        <div id="singleTab" class="tab active">
            <div class="form-group">
                <label for="cookie">ROBLOSECURITY Cookie</label>
                <input type="password" id="cookie" placeholder="Enter your .ROBLOSECURITY cookie">
            </div>
            
            <div class="form-group">
                <label for="audioAssetId">Audio Asset ID</label>
                <input type="text" id="audioAssetId" placeholder="Enter the audio asset ID to configure">
            </div>
            
            <div class="form-group">
                <label for="audioIds">Audio IDs (comma separated)</label>
                <textarea id="audioIds" placeholder="Enter audio IDs separated by commas (e.g., 123456789, 987654321)"></textarea>
            </div>
            
            <div class="form-group">
                <label for="configName">Configuration Name</label>
                <input type="text" id="configName" value="Custom Configuration">
            </div>
            
            <div class="form-group">
                <label for="volume">Volume (0.0 to 1.0)</label>
                <input type="number" id="volume" min="0" max="1" step="0.1" value="1.0">
            </div>
            
            <button onclick="configureAudio()">Configure Audio</button>
        </div>
        
        <div id="bulkTab" class="tab">
            <div class="form-group">
                <label for="bulkCookie">ROBLOSECURITY Cookie</label>
                <input type="password" id="bulkCookie" placeholder="Enter your .ROBLOSECURITY cookie">
            </div>
            
            <div class="form-group">
                <label for="bulkAudioAssetId">Audio Asset ID</label>
                <input type="text" id="bulkAudioAssetId" placeholder="Enter the audio asset ID to configure">
            </div>
            
            <div class="form-group">
                <label for="iterations">Number of Iterations</label>
                <input type="number" id="iterations" min="1" max="100" value="5">
            </div>
            
            <div class="form-group">
                <label for="delay">Delay Between Attempts (seconds)</label>
                <input type="number" id="delay" min="1" max="60" value="2">
            </div>
            
            <div class="form-group">
                <label for="idCount">Number of Random IDs per Attempt</label>
                <input type="number" id="idCount" min="1" max="20" value="5">
            </div>
            
            <button onclick="bulkConfigure()">Start Bulk Configuration</button>
            <button onclick="stopBulk = true;" style="background-color: #dc3545; margin-top: 5px;">Stop Bulk Operation</button>
        </div>
        
        <div id="status" class="status"></div>
        <div id="loading" class="loading">
            <div class="spinner"></div>
            <p>Processing request...</p>
        </div>
    </div>

    <script>
        let stopBulk = false;
        
        function openTab(tabId) {
            // Hide all tabs
            document.querySelectorAll('.tab').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Deactivate all tab buttons
            document.querySelectorAll('.tab-button').forEach(button => {
                button.classList.remove('active');
            });
            
            // Show the selected tab
            document.getElementById(tabId).classList.add('active');
            
            // Activate the clicked button
            event.currentTarget.classList.add('active');
        }
        
        function showStatus(message, isSuccess) {
            const statusElement = document.getElementById('status');
            statusElement.textContent = message;
            statusElement.className = 'status ' + (isSuccess ? 'success' : 'error');
        }
        
        function showLoading(show) {
            document.getElementById('loading').style.display = show ? 'block' : 'none';
        }
        
        async function getCsrfToken(cookie) {
            try {
                const response = await fetch('https://create.roblox.com/v1/audio', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'Cookie': `.ROBLOSECURITY=${cookie}`
                    },
                    credentials: 'include'
                });
                
                if (response.ok) {
                    return response.headers.get('x-csrf-token');
                } else {
                    throw new Error('Failed to get CSRF token');
                }
            } catch (error) {
                console.error('Error getting CSRF token:', error);
                throw error;
            }
        }
        
        async function configureAudio() {
            const cookie = document.getElementById('cookie').value.trim();
            const audioAssetId = document.getElementById('audioAssetId').value.trim();
            const audioIdsInput = document.getElementById('audioIds').value.trim();
            const configName = document.getElementById('configName').value.trim();
            const volume = parseFloat(document.getElementById('volume').value);
            
            if (!cookie || !audioAssetId || !audioIdsInput) {
                showStatus('Please fill in all required fields', false);
                return;
            }
            
            const audioIds = audioIdsInput.split(',').map(id => id.trim()).filter(id => id);
            if (audioIds.length === 0) {
                showStatus('Please enter at least one valid audio ID', false);
                return;
            }
            
            showLoading(true);
            
            try {
                const csrfToken = await getCsrfToken(cookie);
                
                const response = await fetch(`https://create.roblox.com/v1/audio/${audioAssetId}/configuration`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken,
                        'Cookie': `.ROBLOSECURITY=${cookie}`
                    },
                    credentials: 'include',
                    body: JSON.stringify({
                        audioIds: audioIds,
                        configurationName: configName,
                        volume: volume
                    })
                });
                
                if (response.ok) {
                    showStatus('Audio configuration successful!', true);
                } else {
                    const errorData = await response.json();
                    showStatus(`Error: ${errorData.message || 'Unknown error'}`, false);
                }
            } catch (error) {
                console.error('Error configuring audio:', error);
                showStatus(`Error: ${error.message}`, false);
            } finally {
                showLoading(false);
            }
        }
        
        function generateRandomAudioIds(count) {
            const ids = [];
            for (let i = 0; i < count; i++) {
                ids.push(Math.floor(100000000 + Math.random() * 900000000));
            }
            return ids;
        }
        
        async function bulkConfigure() {
            const cookie = document.getElementById('bulkCookie').value.trim();
            const audioAssetId = document.getElementById('bulkAudioAssetId').value.trim();
            const iterations = parseInt(document.getElementById('iterations').value);
            const delay = parseInt(document.getElementById('delay').value) * 1000;
            const idCount = parseInt(document.getElementById('idCount').value);
            
            if (!cookie || !audioAssetId) {
                showStatus('Please fill in all required fields', false);
                return;
            }
            
            stopBulk = false;
            showLoading(true);
            
            try {
                const csrfToken = await getCsrfToken(cookie);
                
                for (let i = 0; i < iterations && !stopBulk; i++) {
                    const audioIds = generateRandomAudioIds(idCount);
                    showStatus(`Attempt ${i+1}/${iterations}: Configuring with IDs ${audioIds.join(', ')}`, true);
                    
                    try {
                        const response = await fetch(`https://create.roblox.com/v1/audio/${audioAssetId}/configuration`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-Token': csrfToken,
                                'Cookie': `.ROBLOSECURITY=${cookie}`
                            },
                            credentials: 'include',
                            body: JSON.stringify({
                                audioIds: audioIds,
                                configurationName: `Bulk Config ${i+1}`,
                                volume: 1.0
                            })
                        });
                        
                        if (!response.ok) {
                            const errorData = await response.json();
                            console.error(`Attempt ${i+1} failed:`, errorData);
                        }
                    } catch (error) {
                        console.error(`Attempt ${i+1} failed:`, error);
                    }
                    
                    if (i < iterations - 1 && !stopBulk) {
                        await new Promise(resolve => setTimeout(resolve, delay));
                    }
                }
                
                showStatus(stopBulk ? 'Bulk operation stopped' : 'Bulk configuration completed!', true);
            } catch (error) {
                console.error('Error in bulk configuration:', error);
                showStatus(`Error: ${error.message}`, false);
            } finally {
                showLoading(false);
            }
        }
    </script>
</body>
</html>
