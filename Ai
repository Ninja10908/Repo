<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DeepSeek Chat</title>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f8f9fa;
            color: #333;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        .header h1 {
            color: #2c3e50;
            margin-bottom: 5px;
        }
        .header p {
            color: #7f8c8d;
            margin-top: 0;
        }
        .chat-container {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            padding: 20px;
            margin-bottom: 20px;
        }
        #chat-log {
            height: 500px;
            overflow-y: auto;
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 8px;
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
        }
        .message {
            margin-bottom: 15px;
            padding: 12px 16px;
            border-radius: 18px;
            max-width: 80%;
            line-height: 1.5;
            word-wrap: break-word;
        }
        .user-message {
            background-color: #e3f2fd;
            margin-left: auto;
            margin-right: 0;
            border-bottom-right-radius: 4px;
        }
        .bot-message {
            background-color: #f1f1f1;
            margin-left: 0;
            margin-right: auto;
            border-bottom-left-radius: 4px;
        }
        .input-area {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }
        #user-input {
            width: 100%;
            padding: 12px 15px;
            border: 1px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            resize: none;
            min-height: 60px;
        }
        .button-group {
            display: flex;
            gap: 10px;
        }
        button {
            background-color: #4285f4;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            flex: 1;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #3367d6;
        }
        #file-input {
            display: none;
        }
        .file-upload-label {
            background-color: #34a853;
            color: white;
            padding: 12px 20px;
            border-radius: 8px;
            cursor: pointer;
            text-align: center;
            transition: background-color 0.3s;
        }
        .file-upload-label:hover {
            background-color: #2d9249;
        }
        .status {
            margin-top: 10px;
            font-style: italic;
            color: #666;
            font-size: 14px;
            text-align: center;
        }
        .typing-indicator {
            display: none;
            color: #666;
            font-style: italic;
            margin-bottom: 15px;
        }
        .markdown-content img {
            max-width: 100%;
            height: auto;
        }
        @media (max-width: 600px) {
            .message {
                max-width: 90%;
            }
            #chat-log {
                height: 400px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>DeepSeek Chat</h1>
        <p>Ask questions or upload files (PDF, TXT, DOCX) for analysis</p>
    </div>

    <div class="chat-container">
        <div id="chat-log"></div>
        <div class="typing-indicator" id="typing-indicator">DeepSeek is typing...</div>
        
        <div class="input-area">
            <textarea id="user-input" placeholder="Type your message here..." rows="3"></textarea>
            
            <div class="button-group">
                <button id="send-button">Send</button>
                <label for="file-input" class="file-upload-label">Upload File</label>
                <input type="file" id="file-input" accept=".pdf,.txt,.docx,.doc">
            </div>
            
            <div class="status" id="status">Ready</div>
        </div>
    </div>

    <script>
        // DOM elements
        const chatLog = document.getElementById('chat-log');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const fileInput = document.getElementById('file-input');
        const statusElement = document.getElementById('status');
        const typingIndicator = document.getElementById('typing-indicator');

        // Sample knowledge base (in a real app, this would be your API)
        const knowledgeBase = {
            "hello": "Hello! How can I assist you today?",
            "hi": "Hi there! What would you like to know?",
            "what is deepseek": "DeepSeek is an advanced AI assistant that can help you with information retrieval, document analysis, and answering questions across various topics.",
            "how does this work": "This interface simulates a Telegram bot experience in your browser. You can ask questions or upload files, and I'll do my best to provide helpful responses.",
            "goodbye": "Goodbye! Feel free to come back if you have more questions."
        };

        // File type information
        const fileTypeInfo = {
            "pdf": "PDF (Portable Document Format) is a file format used to present documents in a manner independent of application software, hardware, and operating systems.",
            "txt": "Text files contain unformatted text that can be easily read by humans and processed by computers.",
            "docx": "DOCX is the document format used by Microsoft Word, containing formatted text, images, and other elements."
        };

        // Add message to chat log with Markdown support
        function addMessage(text, isUser) {
            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message');
            messageDiv.classList.add(isUser ? 'user-message' : 'bot-message');
            
            // Parse markdown if it's a bot message
            if (!isUser) {
                const markdownContent = document.createElement('div');
                markdownContent.className = 'markdown-content';
                markdownContent.innerHTML = marked.parse(text);
                messageDiv.appendChild(markdownContent);
            } else {
                messageDiv.textContent = text;
            }
            
            chatLog.appendChild(messageDiv);
            chatLog.scrollTop = chatLog.scrollHeight;
        }

        // Update status message
        function updateStatus(message) {
            statusElement.textContent = message;
        }

        // Show typing indicator
        function showTyping() {
            typingIndicator.style.display = 'block';
            chatLog.scrollTop = chatLog.scrollHeight;
        }

        // Hide typing indicator
        function hideTyping() {
            typingIndicator.style.display = 'none';
        }

        // Simulate API delay
        function simulateThinking() {
            return new Promise(resolve => {
                const delay = 1000 + Math.random() * 2000; // 1-3 seconds
                setTimeout(resolve, delay);
            });
        }

        // Process text message
        async function processText(text) {
            addMessage(text, true);
            userInput.value = '';
            updateStatus('Processing...');
            showTyping();
            
            // Simulate API delay
            await simulateThinking();
            
            // Convert to lowercase for matching
            const lowerText = text.toLowerCase();
            
            // Check if we have a direct response
            if (knowledgeBase[lowerText]) {
                addMessage(knowledgeBase[lowerText], false);
            } 
            // Handle file type questions
            else if (lowerText.includes("what is a pdf") || lowerText.includes("about pdf")) {
                addMessage(fileTypeInfo["pdf"], false);
            }
            else if (lowerText.includes("what is a txt") || lowerText.includes("about txt")) {
                addMessage(fileTypeInfo["txt"], false);
            }
            else if (lowerText.includes("what is a docx") || lowerText.includes("about docx")) {
                addMessage(fileTypeInfo["docx"], false);
            }
            // Default response
            else {
                const defaultResponses = [
                    "I'm an AI assistant here to help you. Could you clarify your question?",
                    "That's an interesting question. Could you provide more details?",
                    "I'm designed to help with information and file analysis. What specifically would you like to know?",
                    "I'm not sure I understand. Could you rephrase your question?"
                ];
                const randomResponse = defaultResponses[Math.floor(Math.random() * defaultResponses.length)];
                addMessage(randomResponse, false);
            }
            
            hideTyping();
            updateStatus('Ready');
        }

        // Process file upload
        async function processFile(file) {
            updateStatus(`Processing ${file.name}...`);
            showTyping();
            
            // Simulate API delay
            await simulateThinking();
            
            addMessage(`ðŸ“„ Uploaded file: ${file.name}`, true);
            
            // Get file extension
            const extension = file.name.split('.').pop().toLowerCase();
            
            // Create simulated analysis based on file type
            let analysis = "";
            if (extension === 'pdf') {
                analysis = `I've analyzed the PDF file "${file.name}". Here's a summary:\n\n` +
                `- This appears to be a document with simulated content\n` +
                `- PDFs can contain text, images, and complex layouts\n` +
                `- For a real implementation, you would need a PDF parser`;
            }
            else if (extension === 'txt') {
                analysis = `I've analyzed the text file "${file.name}". Here's what I found:\n\n` +
                `- Text files contain plain, unformatted content\n` +
                `- In a real implementation, I would analyze the actual text content\n` +
                `- Try asking me about the content after uploading in a real system`;
            }
            else if (extension === 'docx' || extension === 'doc') {
                analysis = `I've analyzed the Word document "${file.name}". Key points:\n\n` +
                `- Word documents can contain formatted text, tables, and images\n` +
                `- This is a simulated analysis (real implementation would require DOCX parsing)\n` +
                `- The document appears to be professionally formatted`;
            }
            else {
                analysis = `I received a ${extension.toUpperCase()} file, but this format isn't fully supported in this demo. ` +
                `Supported formats are PDF, TXT, and DOCX.`;
            }
            
            addMessage(analysis, false);
            
            hideTyping();
            updateStatus('Ready');
        }

        // Event listeners
        sendButton.addEventListener('click', () => {
            const text = userInput.value.trim();
            if (text) {
                processText(text);
            }
        });

        userInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                const text = userInput.value.trim();
                if (text) {
                    processText(text);
                }
            }
        });

        fileInput.addEventListener('change', () => {
            if (fileInput.files.length > 0) {
                processFile(fileInput.files[0]);
                fileInput.value = ''; // Reset file input
            }
        });

        // Initial welcome message
        setTimeout(() => {
            addMessage("Hello! I'm DeepSeek, your AI assistant. You can ask me questions or upload files for analysis.", false);
        }, 500);
    </script>
</body>
</html>
